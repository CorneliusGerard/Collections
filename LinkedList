public class Node<T> {
	T data;
	Node<T> next;
	Node(T data)
	{
		this.data = data;
		this.next = null;
	}
}
public class MyLinkedList<T> {
	public Node<T> head;
	int len = 0;
	MyLinkedList(){
		this.head = null;
	}
	void insert(T data)
	{
		Node<T> node = new Node<>(data);
		node.next = null;
		if(this.head == null) // If list is empty
		{
			head = node;
		}
		else
		{
			Node<T> temp = head;	// If elements are already present
			while(temp.next != null)	// Using a temp variable to traverse to end of list
			{
				temp = temp.next; 
			}
			temp.next = node; // Now connection is made with new node
		}
		len++;
	}
	void display()
	{
		Node<T> curr = head;  // A curr variable for traversal
		while(curr!=null)  // Till end of list condition
		{
			System.out.println(curr.data); // Prints data of node
			curr = curr.next;
		}
	}
	void insert(int pos,T data)
	{
		if(pos>len+1) // Position cannot be less than 1
		{
			System.out.println("Invalid position");
		}
		if(pos == 1) // If to be inserted at first
		{
			Node<T> temp = head;  // A temp var is created to point at head
			head = new Node<T>(data); 
			head.next = temp; // Now the head points to next node
		}
		Node<T> temp = head;   
		Node<T> prev = new Node<T>(null);
		while(pos-1 > 0) // If to be inserted at middle or end
		{
			prev = temp;
			temp = temp.next;
			pos--;
		}
		prev.next = new Node<T>(data); // Previous points to new node
		prev.next.next = temp;  
	}
	void deleteByPos(int pos)
	{
		if(pos<1) // Position cannot be less than 1
		{
			System.out.println("Invalid");
		}
		else if(pos == 1 && head !=null) // First position to be deleted
		{
			Node<T> node = head;
			head = head.next;
		}
		else {
		Node<T> temp = head;
		for(int i=1;i<pos-1;i++) // Position is middle or last
		{
			if(temp!=null)
				temp = temp.next;
		}
		if(temp != null && temp.next !=null)
		{
			Node<T> node = temp.next;
			temp.next = temp.next.next;
			node = null;
		}
		}	
}
}
public class Runner {
	public static void main(String args[]) {
	MyLinkedList<Integer> list1 = new MyLinkedList<>();
	list1.insert(50);
	list1.insert(70);
	list1.insert(2,30);
	list1.deleteByPos(3);
	list1.display();
	MyLinkedList<String> list2 = new MyLinkedList<>();
	list2.insert("Hello");
	list2.insert("this is");
	list2.insert("Linked list");
	list2.insert(3,"a");
	list2.deleteByPos(1);
	list2.display();
}
}
